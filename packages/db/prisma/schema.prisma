generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum Platform {
  CODEFORCES
  CODECHEF
  LEETCODE
  ATCODER
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  username   String     @unique
  name       String
  avatar     String?
  role       Role       @default(USER)
  provider   String     @default("credentials")
  providerId String?    @unique
  createdAt  DateTime   @default(now())
  bookmarks  Bookmark[]
}

model Contest {
  id         Int        @id @default(autoincrement())
  title      String
  url        String     @unique
  youtubeUrl String?
  platform   Platform   @default(CODEFORCES)
  startsAt   Int
  endsAt     Int
  bookmarks  Bookmark[]
}

model Bookmark {
  userId    Int
  contestId Int
  user      User    @relation(fields: [userId], references: [id])
  contest   Contest @relation(fields: [contestId], references: [id])

  @@id([userId, contestId])
}

enum DifficultyCategory{
  EASY
  MEDIUM
  HARD
}

model Problem { 
  id                 BigInt     @id @default(autoincrement())
  platform           Platform   
  problemCode        String
  title              String
  url                String
  slug               String?
  difficultyCategory DifficultyCategory?
  difficultyNumeric  Int?
  isActive           Boolean    @default(true)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  tags               ProblemTag[]

  @@unique([platform, problemCode])
}

model Tag {
  id                 BigInt     @id @default(autoincrement())
  name               String     @unique
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  problems           ProblemTag[]
}

model ProblemTag {
  problemId          BigInt
  tagId              BigInt
  createdAt          DateTime    @default(now())

  problem            Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  tag                Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([problemId, tagId])
}