generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum Platform {
  CODEFORCES
  CODECHEF
  LEETCODE
  ATCODER
  CSES
}

enum DifficultyCategory {
  EASY
  MEDIUM
  HARD
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String
  username   String      @unique
  name       String
  avatar     String?
  role       Role        @default(USER)
  provider   String      @default("credentials")
  providerId String?     @unique
  createdAt  DateTime    @default(now())
  ojHandles  OjProfile[]
  bookmarks  Bookmark[]
  solved     Solved[]
}

model Contest {
  id         Int        @id @default(autoincrement())
  title      String
  url        String     @unique
  youtubeUrl String?
  platform   Platform   @default(CODEFORCES)
  startsAt   Int
  endsAt     Int
  bookmarks  Bookmark[]
}

model Bookmark {
  userId    Int
  contestId Int
  user      User    @relation(fields: [userId], references: [id])
  contest   Contest @relation(fields: [contestId], references: [id])

  @@id([userId, contestId])
}

model Problem {
  id                 Int                   @id @default(autoincrement())
  platform           Platform
  problemCode        String                @unique
  title              String
  url                String                @unique
  slug               String
  difficultyCategory DifficultyCategory?
  difficultyNumeric  Int?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  solved             Solved[]
  tags               TagsOnProblem[]
  companyTags        CompanyTagOnProblem[]
  sections           SectionOnProblem[]
}

model Tag {
  id       Int             @id @default(autoincrement())
  name     String
  slug     String          @unique
  problems TagsOnProblem[]
}

model TagsOnProblem {
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([problemId, tagId])
}

model CompanyTag {
  id        Int                   @id @default(autoincrement())
  name      String
  slug      String                @unique
  problems  CompanyTagOnProblem[]
  problemId Int?
}

model CompanyTagOnProblem {
  problemId    Int
  companyTagId Int
  problem      Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  companyTag   CompanyTag @relation(fields: [companyTagId], references: [id])

  @@id([problemId, companyTagId])
}

model OjProfile {
  id       Int     @id @default(autoincrement())
  handle   String  @unique
  userId   Int
  user     User    @relation(fields: [userId], references: [id])
  verified Boolean @default(false)
}

model Solved {
  userId    Int
  problemId Int
  solvedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([userId, problemId])
}

model Sheet {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique @default(uuid())
  description String?
  section     Section[]
}

model Section {
  id       Int                @id @default(autoincrement())
  title    String
  sheetId  Int
  sheet    Sheet              @relation(fields: [sheetId], references: [id])
  problems SectionOnProblem[]
}

model SectionOnProblem {
  problemId Int
  sectionId Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@id([problemId, sectionId])
}
